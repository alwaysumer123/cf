{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Demo App instance stack",

  "Parameters": {

    "VpcId": {
      "Description": "VPC ID",
      "Type": "String"
    },

    "AwsAccountId": {
      "Description": "AWS Account ID",
      "Type": "String"
    },


    "OpsBucket": {
      "Description": "Ops Bucket",
      "Type": "String",
      "Default": ""
    },

    "VpcCidrIp": {
      "Description": "VPC Cidr IP",
      "Type": "String",
      "Default": ""
    },

    "BastionCidr1": {
      "Description": "Bastion CIDR 1",
      "Type": "String"
    },

    "BastionCidr2": {
      "Description": "Bastion CIDR IP 2",
      "Type": "String"
    },

    "BastionCidr3": {
      "Description": "Bastion CIDR IP 3",
      "Type": "String"
    },

    "AvailabilityZones": {
      "Description": "Availability Zone for the instances",
      "Type": "CommaDelimitedList"
    },

    "InfrastructureSnsTopicArn": {
      "Description": "SNS topic to notify of scaling operations",
      "Type": "String"
    },

    "MaximumInstances": {
      "Type": "String",
      "Description": "Maximum number of  instances",
      "Default": "1"
    },

    "MinimumInstances": {
      "Type": "String",
      "Description": "Minimum number of instances",
      "Default": "1"
    },

    "AmiId": {
      "Description": "Ami to provision",
      "Type": "String"
    },

    "SubnetIds": {
      "Description": "CSV of subnet IDs that this ASG should use",
      "Type": "CommaDelimitedList"
    },

    "AppArtifactUrl": {
      "Type": "String",
      "Description": "S3 URL to the app artifact",
      "Default": ""
    },

    "Role": {
      "Type": "String",
      "Description": "Role name to use as tag",
      "Default": "conduit-ec2"
    },

    "Application": {
      "Type": "String",
      "Description": "Application name to use as tag",
      "Default": "conduit"
    },

    "Customer": {
      "Type": "String",
      "Description": "The customer who will be using this environment",
      "Default": "uma"
    },

    "Environment": {
      "Type": "String",
      "Description": "Environment Name"
    },

    "EnvironmentIncrement": {
      "Type": "String",
      "Description": "Environment Increment Number",
      "Default": "1"

    },

    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "m1.medium",
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "ExternalAppLoadBalancerName": {
      "Description": "ExternalAppLoadBalancerName",
      "Type": "String",
      "Default": ""
    },
    "AppAccessGroupId": {
      "Description": "AppAccessGroupId",
      "Type": "String",
      "Default": ""
    },
    "SSHKeysBucket": {
      "Description": "VPC ID",
      "Type": "String",
      "Default": "ssh-334419994682-keys"
    },

    "Abort": {
      "Description": "Should the entire deployment be aborted if bootstraping fails?",
      "Type": "String",
      "Default": "yes",
      "AllowedValues": ["yes", "no"],
      "ConstraintDescription": "yes or no"
    }

  },

  "Conditions": {

    "CreateProdResources": {
      "Fn::Equals": [{
        "Ref": "Environment"
      }, "prod"]
    }

  },

  "Mappings": {
    "BootstrapSettingMap": {
      "abort": {
        "yes": "$?",
        "no": "0"
      }
    },
    "S3Map": {
      "us-west-1": {
        "s3": "s3:/",
        "http": "http://s3-us-west-1.amazonaws.com",
        "https": "https://s3-us-west-1.amazonaws.com",
        "endpoint": "s3-us-west-1.amazonaws.com"

      },
      "us-west-2": {
        "s3": "s3:/",
        "http": "http://s3-us-west-2.amazonaws.com",
        "https": "https://s3-us-west-2.amazonaws.com",
        "endpoint": "s3-us-west-2.amazonaws.com"
      },
      "us-east-1": {
        "s3": "s3:/",
        "http": "http://s3-us-east-1.amazonaws.com",
        "https": "https://s3-us-east-1.amazonaws.com",
        "endpoint": "s3-us-east-1.amazonaws.com"
      }
    }
  },

  "Resources": {

    "AppUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [{
          "PolicyName": "app_user_resource_access",
          "PolicyDocument": {
            "Statement": [{
                "Effect": "Allow",
                "Action": ["s3:Get*", "s3:Put*", "s3:DeleteObject", "s3:List*", "s3:PutObjectAcl"],
                "Resource": [{
                    "Fn::Join": ["", ["arn:aws:s3:::", {
                        "Ref": "Customer"
                      },
                      "-",
                      {
                        "Ref": "Environment"
                      },
                      "-",
                      {
                        "Ref": "EnvironmentIncrement"
                      },
                      "-logs-",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]]
                  },
                  {
                    "Fn::Join": ["", ["arn:aws:s3:::", {
                        "Ref": "Customer"
                      },
                      "-",
                      {
                        "Ref": "Environment"
                      },
                      "-",
                      {
                        "Ref": "EnvironmentIncrement"
                      },
                      "-logs-",
                      {
                        "Ref": "AWS::Region"
                      }, "/*"
                    ]]
                  },
                  {
                    "Fn::Join": ["", ["arn:aws:s3:::", {
                        "Ref": "Customer"
                      },
                      "-",
                      {
                        "Ref": "Environment"
                      },
                      "-",
                      {
                        "Ref": "EnvironmentIncrement"
                      },
                      "-data-",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]]
                  },
                  {
                    "Fn::Join": ["", ["arn:aws:s3:::", {
                        "Ref": "Customer"
                      },
                      "-",
                      {
                        "Ref": "Environment"
                      },
                      "-",
                      {
                        "Ref": "EnvironmentIncrement"
                      },
                      "-data-",
                      {
                        "Ref": "AWS::Region"
                      }, "/*"
                    ]]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": ["sqs:Get*", "sqs:Receive*", "sqs:List*"],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": ["elasticloadbalancing:DeregisterInstances*", "elasticloadbalancing:RegisterInstances*"],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:DescribeAvailabilityZones",
                  "ec2:DescribeVpcs",
                  "ec2:DescribeAccountAttributes",
                  "ec2:DescribeSecurityGroups"
                ],
                "Resource": "*"
              }
            ]
          }
        }]
      }
    },

    "AppUserKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "AppUser"
        }
      }
    },



    "AppRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com",
                "codedeploy.us-east-1.amazonaws.com",
                "codedeploy.us-east-2.amazonaws.com",
                "codedeploy.us-west-1.amazonaws.com",
                "codedeploy.us-west-2.amazonaws.com"
              ]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ],
        "Path": "/",
        "Policies": [{
            "PolicyName": "ssh_access_RO",
            "PolicyDocument": {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "s3:*"
                ],
                "Resource": ["*"]
              }]
            }
          }

        ]
      }
    },

    "AppInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "AppRole"
        }]
      }
    },

    "Instances": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "AvailabilityZones"
        },
        "LaunchConfigurationName": {
          "Ref": "InstanceLaunchConfig"
        },
        "LoadBalancerNames": [ {
          "Fn::ImportValue": {
            "Ref": "ExternalAppLoadBalancerName"
          }
        }],
        "MaxSize": {
          "Ref": "MaximumInstances"
        },
        "MinSize": {
          "Ref": "MinimumInstances"
        },
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "InfrastructureSnsTopicArn"
          },
          "NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [{
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Role",
            "Value": {
              "Ref": "Role"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "Application"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {
              "Fn::Join": ["", [{
                  "Ref": "Customer"
                },
                "-", {
                  "Ref": "Environment"
                },
                "-", {
                  "Ref": "EnvironmentIncrement"
                }
              ]]
            },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": {
          "Ref": "SubnetIds"
        }
      }
    },

    "InstanceLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "AppInstanceProfile"
        },
        "BlockDeviceMappings": [{
            "DeviceName": "/dev/sdb",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/sdd",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/sde",
            "VirtualName": "ephemeral3"
          }
        ],
        "KeyName": "ops-key",
        "PlacementTenancy": "dedicated",
        "ImageId": {
          "Ref": "AmiId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [{
          "Ref": "InstancesSecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash\n",
              "aws configure set default.region ", {
                "Ref": "AWS::Region"
              }, "\n",

              "echo 'Running cfn-init'", "\n",

              "/opt/aws/bin/cfn-init ",
              " --verbose ",
              " -s ", {
                "Ref": "AWS::StackName"
              },
              " -r InstanceLaunchConfig",
              " --region=", {
                "Ref": "AWS::Region"
              }, "\n",

              "# install codedeploy agent\n",
              "runuser -c \"yum update -y\" root", "\n",
              "runuser -c \"yum install wget bzip2 zip unzip ruby -y\" root", "\n",
              "rpm -Uvh https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-12.4.0-1.el6.x86_64.rpm\n",


              "# Access Management - Sync the authorized_keys file and create a cron job to re-sync every 5 minutes\n",
              "cat << EOF > /usr/local/bin/sync_authorized_keys", "\n",
              "#!/bin/bash -ex", "\n",
              ". ~/.bash_profile", "\n",
              "curl -s http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > /tmp/authorized_keys", "\n",
              "timeout 60 aws s3 cp s3://", {
                "Ref": "SSHKeysBucket"
              }, "/authorized_keys - >> /tmp/authorized_keys", "\n",
              "cat /tmp/authorized_keys | xargs -n 1 -I {} bash -c 'ssh-keygen -l -f /dev/stdin <<< \"{}\"'", "\n",
              "install -m 600 -o ec2-user /tmp/authorized_keys /home/ec2-user/.ssh/authorized_keys", "\n",
              "rm /tmp/authorized_keys", "\n",
              "EOF", "\n",
              "chmod 744 /usr/local/bin/sync_authorized_keys", "\n",
              "/usr/local/bin/sync_authorized_keys || true", "\n",

              "cat << EOF > /etc/cron.d/sync_authorized_keys", "\n",
              "*/5 * * * * root /usr/local/bin/sync_authorized_keys > /var/log/sync_authorized_keys.log 2>&1", "\n",
              "EOF", "\n",

              "aws s3 sync s3://yum-myapp-us-west-2/cookbooks /var/tmp\n",
              "mkdir /var/chef/cookbooks\n",

              "cat << EOF > /var/chef/solo.rb", "\n",

              "# Generic solo.rb", "\n",
              "file_cache_path  /var/chef/", "\n",
              "cookbook_path  /var/chef/cookbooks", "\n",
              "environment_path /var/chef/environments", "\n",
              "role_path /var/chef/roles", "\n",
              "data_bag_path  /var/chef/data_bags", "\n",
              "mkdir -p /var/log/chef", "\n",
              "log_location /var/log/chef/chef.log", "\n",
              "EOF", "\n",
              "chmod 744 /var/chef/solo.rb", "\n",
              "/var/chef/solo.rb || true", "\n",



              "#cp -r /var/tmp/* /var/chef/cookbooks/\n",
              "#chef-solo -o recipe[java-jdk]\n",
              "#chef-solo -o recipe[tomcat]\n",

              "#runuser -c \"unzip /var/tmp/chef_repo.zip -d /var/tmp\" root", "\n",
              "#runuser -c \"cp -r /var/tmp/chef /var/ \" root", "\n",
              "#runuser -c \"chmod 755 /var/tmp/scripts/*.sh \" root", "\n",
              "#runuser -c \"rm -f /var/tmp/chef_repo.zip\" root", "\n",
              "#runuser -c \"chef-solo -c /var/chef/solo.rb -o 'role[desnxg_conduit]' \" root", "\n",

              "echo Done!", "\n"
            ]]
          }
        }
      }
    },

    "InstancesSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group for Web instances",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [{
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Fn::ImportValue": {
                "Ref": "AppAccessGroupId"
              }
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "BastionCidr1"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "BastionCidr2"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "BastionCidr3"
            }
          }
        ],
        "Tags": [{
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Role",
            "Value": {
              "Ref": "Role"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "Application"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Fn::Join": ["", [{
                "Ref": "Customer"
              }, "-", {
                "Ref": "Environment"
              }, "-", {
                "Ref": "EnvironmentIncrement"
              }]]
            }
          }
        ]
      }
    }
  },

  "Outputs": {

    "InstanceAutoScalingGroup": {
      "Value": {
        "Ref": "Instances"
      },
      "Description": "Wb ASG ID"
    }

  }
}